git : 버전관리 도구(형상관리)
로컬, 분산 버전 관리
svn -> 원격 버전 관리

d:\workspace>git config --global user.name "sw0495.lee"
d:\workspace>git config --global user.email "sw0495.lee@samsung.com"
d:\workspace>git config --list
d:\workspace>mkdir git_test
d:\workspace\git_test>git init (.git repository 폴더를 생성)
d:\workspace\git_test>dir
d:\workspace\git_test>git status
d:\workspace\git_test>git add git_test.txt (tracted file 생성)
d:\workspace\git_test>git commit git_test.txt -m "First commit" (repository에 commit)
d:\workspace\git_test>move .gitignore.txt .gitignore
d:\workspace\git_test>git rm test_abc.txt
d:\workspace\git_test>git log
d:\workspace\git_test>git log --stat (d:\workspace\git_test\.git>git log --stat)
log 확인 시:
 enter : 한 줄씩 넘어감
 q : 끝 냄
git log --stat #통계 정보를 조회
git log --pretty=oneline # 한 줄에 이쁘게 정보를 출력
git log --pretty=format:"%h - %an, %ar :%s " #날짜 정보
git log --pretty=format:"%h - %an, %ar :%s " --graph 
d:\workspace\git_test\.git>git log --pretty=oneline
git checkout 로그 앞의 7자리코드 -> 코드의 상태로 되 돌아감
d:\workspace\git_test>git checkout master #master branch로 감
d:\workspace\git_test>git branch #branch 확인
d:\workspace\git_test>git branch new_test #new_test의 branch 생성
d:\workspace\git_test>git checkout new_test #new_test branch로 감
branch 관련 명령어
 commit
 branch : git branch bugWgit git main^^2^
 checkout
 rebase : 커밋들을 모아서 복사한 뒤, 다른 곳에 떨궈 놓는 것
커밋들의 흐름을 보기 좋게 한 줄로 만들 수 있다
커밋 로그와 이력이 깨끗해 진다
git rebase branch : branch에 떨궈 놓는다
git rebase -i 대화형 리베이스
 reset : 변경한 내용 되돌리기 : 예전 커밋을 가리키도록 이동시키는 방법으로 되돌림, 다른 사람과 함께 작업하는 리모트 브랜치에서는 쓸 수 없다
  git reset HEAD~1
 revert : 변경한 내용 되돌리기 :  예전 커밋은 그대로 두고 새로운 커밋을 만들어 되돌리는 식으로 함
  git revert HEAD
 merge : 지징한 브랜치를 현재 브랜치에 합친다
 HEAD : 현재 체크아웃된 커밋을 가리킨다(현재 작업중인 커밋)
 hash이용 branch에서 분리 가능
 log 이용 hash 확인 가능
 상대참조 : HEAD 기준으로... ^(한번에 한 커밋, 뒤에 숫자는 참조하는 병합된 커밋의 부모를 특정지을 수 있다), ~num(한번에 여러 커밋)
  git checkout HEAD~ 와 같이 상대 참조하여 쓸 수 있다
  git branch -f main HEAD~3 : branch main을 상대참조 HEAD~3의 위치로 이동한다
 cherry-pick : 현재 위치(head) 아래에 있는 일련의 커밋들에 대한 복사본을 만드는 것
  git cherry-pick <Commit1><Commit2><...>
d:\workspace\git_test>git merge new_test #master 상태에서 branch를 merge
gitk 명령어 : UI 실행
local repository : 내 컴퓨터
remote repository : 원격 컴퓨터 -> github

remote repository에 추가
echo "# sw0495" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.ecodesamsung.com/sw0495-lee/setting.git
git push -u origin main
git push remote source:destination

echo "# sw0495" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/sw0495/sw0495.git #rempository를 origin으로 생성
git push -u origin main #remote origin repository에 main branch push
git push -u origin net_test #remote origin repository에 new_test branch push
git push remote source:destination

git remote 명령어 :
git remote 
git remote -v
git remote add
git remote rm

git clone : repository를 local로 가져온다, 이때는 이미 github에 repository가 있는 것이므로 바로 github에 push가 가능하다
d:\workspace>git clone https://github.com/sw0495/Gachon_CS50_OR_KMOOC.git
수정 후 push
git pull origin main : remote origin repository main branch를 모두 가져온다(이전 버전 포함) (fetch + merge 와 유사 기능)
git fetch : 특정 브랜치 가져옴 -> remote에는 있지만 로컬에는 없는 커밋을 다운 받는 다 -> remote를 업데이트 한다  -> 로컬의 상태는 바꾸지 않는 다           
git merge : fetch에서 가져온 브랜치를 합침
git pull --rebase : fetch와 리베이스를 하는 작업

fork : 남의 github repository를 내 repository로 가져오는 것 <-> clone은 내 local로 가져오는 것, git을 사용하여 수행
pr(pull request)

shell : 키보드로 입력한 명령어를 운영체제에 전달, 명령어를 실행하게 하는 프로그램
git bash : 윈도우 운영체게 환경에서도 리눅스 커맨드를 사용할 수 있게 된다

Git 의 디폴트 브랜치명이 master에서 main으로 변경
// git 생성 전
git config --global init.defaultBranch main
 
//기존 이름이 있는 경우
git branch -m master main

gitlens
Commit 이력, File History 추가, Branches, Remotes, Stashes, Tag 추가 기능
Commit 한 이력이나, Branch 목록, Remote Repository까지 잘 정리해서 보여준다

git tag  : 영구적인 참조, 어떠한 작업 불가
git tag v1(태그 이름) c1(커밋 해시) :  태그 이름을 지정하지 않으면 HEAD에 태그를 붙인다 
git describe <ref>: 가장 가까운 태그에 상대적으로 어디에 위치해주는 지 묘사해주는 명령어, ref를 특정하지 않으면 head를 사용
git bisect :  문제가 되는 커밋을 찾는 명령어

인터렉티브 리베이스
git commit --amend

checkout one
cherry-pick c4 c3 c2
checkout two
cherry-pick c5 c4 c3 c2
git branch -f three c2

git remote 이름 형식
<remote name>/<branch name>

지정한 커밋 참조해서 새로운 브랜치를 생성하여 checkout
git checkout -b feature c2

지정한 원격 브랜치를 참조해서 새로운 브랜치를 생성하여 checkout
git checkout -b feature o/main

git branch -u : 브랜치에 원격 추적 설정을 하는 또 다른 방법 : feature 브랜치가 이미 있을 경우
git branch -u o/main feature